webpackJsonp([20,92],{914:function(e,t,n){!function(e){e(n(882))}(function(e){"use strict";e.defineMode("haskell",function(e,t){function switchState(e,t,n){return t(n),n(e,t)}function normal(e,t){if(e.eatWhile(f))return null;var c=e.next();if(u.test(c)){if("{"==c&&e.eat("-")){var d="comment";return e.eat("#")&&(d="meta"),switchState(e,t,ncomment(d,1))}return null}if("'"==c)return e.eat("\\"),e.next(),e.eat("'")?"string":"string error";if('"'==c)return switchState(e,t,stringLiteral);if(r.test(c))return e.eatWhile(l),e.eat(".")?"qualifier":"variable-2";if(n.test(c))return e.eatWhile(l),"variable";if(a.test(c)){if("0"==c){if(e.eat(/[xX]/))return e.eatWhile(i),"integer";if(e.eat(/[oO]/))return e.eatWhile(o),"number"}e.eatWhile(a);d="number";return e.match(/^\.\d+/)&&(d="number"),e.eat(/[eE]/)&&(d="number",e.eat(/[-+]/),e.eatWhile(a)),d}if("."==c&&e.eat("."))return"keyword";if(s.test(c)){if("-"==c&&e.eat(/-/)&&(e.eatWhile(/-/),!e.eat(s)))return e.skipToEnd(),"comment";d="variable";return":"==c&&(d="variable-2"),e.eatWhile(s),d}return"error"}function ncomment(e,t){return 0==t?normal:function(n,r){for(var a=t;!n.eol();){var i=n.next();if("{"==i&&n.eat("-"))++a;else if("-"==i&&n.eat("}")&&0==--a)return r(normal),e}return r(ncomment(e,a)),e}}function stringLiteral(e,t){for(;!e.eol();){var n=e.next();if('"'==n)return t(normal),"string";if("\\"==n){if(e.eol()||e.eat(f))return t(stringGap),"string";e.eat("&")||e.next()}}return t(normal),"string error"}function stringGap(e,t){return e.eat("\\")?switchState(e,t,stringLiteral):(e.next(),t(normal),"error")}var n=/[a-z_]/,r=/[A-Z]/,a=/\d/,i=/[0-9A-Fa-f]/,o=/[0-7]/,l=/[a-z_A-Z0-9'\xa1-\uffff]/,s=/[-!#$%&*+.\/<=>?@\\^|~:]/,u=/[(),;[\]`{}]/,f=/[ \t\v\f]/,c=function(){function setType(t){return function(){for(var n=0;n<arguments.length;n++)e[arguments[n]]=t}}var e={};setType("keyword")("case","class","data","default","deriving","do","else","foreign","if","import","in","infix","infixl","infixr","instance","let","module","newtype","of","then","type","where","_"),setType("keyword")("..",":","::","=","\\","<-","->","@","~","=>"),setType("builtin")("!!","$!","$","&&","+","++","-",".","/","/=","<","<=","=<<","==",">",">=",">>",">>=","^","^^","||","*","**"),setType("builtin")("Bool","Bounded","Char","Double","EQ","Either","Enum","Eq","False","FilePath","Float","Floating","Fractional","Functor","GT","IO","IOError","Int","Integer","Integral","Just","LT","Left","Maybe","Monad","Nothing","Num","Ord","Ordering","Rational","Read","ReadS","Real","RealFloat","RealFrac","Right","Show","ShowS","String","True"),setType("builtin")("abs","acos","acosh","all","and","any","appendFile","asTypeOf","asin","asinh","atan","atan2","atanh","break","catch","ceiling","compare","concat","concatMap","const","cos","cosh","curry","cycle","decodeFloat","div","divMod","drop","dropWhile","either","elem","encodeFloat","enumFrom","enumFromThen","enumFromThenTo","enumFromTo","error","even","exp","exponent","fail","filter","flip","floatDigits","floatRadix","floatRange","floor","fmap","foldl","foldl1","foldr","foldr1","fromEnum","fromInteger","fromIntegral","fromRational","fst","gcd","getChar","getContents","getLine","head","id","init","interact","ioError","isDenormalized","isIEEE","isInfinite","isNaN","isNegativeZero","iterate","last","lcm","length","lex","lines","log","logBase","lookup","map","mapM","mapM_","max","maxBound","maximum","maybe","min","minBound","minimum","mod","negate","not","notElem","null","odd","or","otherwise","pi","pred","print","product","properFraction","putChar","putStr","putStrLn","quot","quotRem","read","readFile","readIO","readList","readLn","readParen","reads","readsPrec","realToFrac","recip","rem","repeat","replicate","return","reverse","round","scaleFloat","scanl","scanl1","scanr","scanr1","seq","sequence","sequence_","show","showChar","showList","showParen","showString","shows","showsPrec","significand","signum","sin","sinh","snd","span","splitAt","sqrt","subtract","succ","sum","tail","take","takeWhile","tan","tanh","toEnum","toInteger","toRational","truncate","uncurry","undefined","unlines","until","unwords","unzip","unzip3","userError","words","writeFile","zip","zip3","zipWith","zipWith3");var n=t.overrideKeywords;if(n)for(var r in n)n.hasOwnProperty(r)&&(e[r]=n[r]);return e}();return{startState:function(){return{f:normal}},copyState:function(e){return{f:e.f}},token:function(e,t){var n=t.f(e,function(e){t.f=e}),r=e.current();return c.hasOwnProperty(r)?c[r]:n},blockCommentStart:"{-",blockCommentEnd:"-}",lineComment:"--"}}),e.defineMIME("text/x-haskell","haskell")})},993:function(e,t,n){!function(e){e(n(882),n(914))}(function(e){"use strict";e.defineMode("haskell-literate",function(t,n){var r=e.getMode(t,n&&n.base||"haskell");return{startState:function(){return{inCode:!1,baseState:e.startState(r)}},token:function(e,t){return e.sol()&&(t.inCode=e.eat(">"))?"meta":t.inCode?r.token(e,t.baseState):(e.skipToEnd(),"comment")},innerMode:function(e){return e.inCode?{state:e.baseState,mode:r}:null}}},"haskell"),e.defineMIME("text/x-literate-haskell","haskell-literate")})}});